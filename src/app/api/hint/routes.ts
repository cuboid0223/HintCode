import OpenAI from "openai";
import { OpenAIStream, StreamingTextResponse } from "ai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(req: Request) {
  //   const userId = (await auth())?.user.id;
  console.log("call api");
  const userId = true;
  if (!userId) {
    return new Response("Unauthorized", {
      status: 401,
    });
  }
  const { messages } = await req.json();

  // const fineTune = await openai.fineTuning.jobs.create({
  //   training_file: "file-kSPmptB7jGezIpOB8Zrb4DwC",
  //   model: "gpt-3.5-turbo",
  // });
  // console.log(`Fine-tuning ID: ${fineTune.id}`);

  const response = await openai.chat.completions.create({
    messages: [
      {
        role: "system",
        content:
          "You are a patient and proficient Python programming teacher. You don't usually provide the user with direct answers but instead offer progressive feedback to guide the user in finding the solution. You will receive three pieces of information separated by XML tags. The content within the first <info> tag will be a Python question, the content within the second <code> tag will be Python code, and the content within the third <output> tag will be the output message generated by compiling the code. You cannot give the user the complete answer directly; instead, you need to guide them progressively. It's only after the user has been unable to identify the problem after the third or fourth attempt that you would provide the correct code and place it within the <code> tag of the response.",
      },
      ...messages,
    ],
    stream: true,
    model: "ft:gpt-3.5-turbo-0613:personal::8F0OMJqj",
  });

  const stream = OpenAIStream(response);
  console.log(new StreamingTextResponse(stream));
  return new StreamingTextResponse(stream);
}
